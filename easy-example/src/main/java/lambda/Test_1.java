package lambda;

public class Test_1 {


    public static void main(String[] args) {

/*        Когда лямбда-выражение появляется в контексте своего целевого типа,
        автоматически создается экземпляр класса, реализующего функциональный интерфейс,
        причем лямбда-выражение определяет поведение абстрактного метода,
        объявляемого в функциональном интерфейсе. А когда этот метод вызывается через свой
        адресат, выполняется лямбда-выражение. Таким образом, лямбда-выражение
        позволяет преобразовать сегмент кода в объект.
*/


    MyNumber myNum;
//Использовать лямбду в контексте присвоения
    myNum = () -> 12345.222;
        System.out.println(myNum);//сам анонимный обьект
        System.out.println(myNum.getValue());//значение полученное из анонимного обьекта

    myNum =() -> Math.random()*100;
        System.out.println((int)myNum.getValue());
        System.out.println((int)myNum.getValue());

        //проверка чётности числа

        // Лямбда-выражение, в котором проверяется,
        // является ли число четным
        //реализуем интерфейс через лямбду
        NumericTest isEven = (n) -> (n % 2)==0;
        if(isEven.test(10))
            System.out.println("Число 10 четное");
        if(!isEven.test(9))
            System.out.println("Число 9 нечетное");

                    // А теперь воспользоваться лямбда-выражением,
                    // в котором проверяется, является ли число
                    //неотрицательным

        NumericTest isNonNeg = (n) -> n >= 0;

        if(isNonNeg.test(1)) System.out.println("Число 1 неотрицательное");

        if(!isNonNeg.test(-9)) System.out.println("Число -9 отрицательное");


    }
}
